use std::str::FromStr;
use crate::ast::{Expr, ExprOpcode};
use crate::ast::{LogicalExpr, LogicalOpcode, LogicalExprOpcode};
use crate::ast::{Command, Probability};

grammar;

// ----- ARITHMETIC EXPRESSIONS ----- 

pub Expr: Box<Expr> = {
  Expr ExprOp Expr2 => Box::new(Expr::ExprOp(<>)),
  Expr2,
};

Expr2: Box<Expr> = {
  Expr2 Expr2Op Var => Box::new(Expr::ExprOp(<>)),
  Var,
};

Var: Box<Expr> = {
  NumLiteral => Box::new(Expr::Number(<>)),
  Identifier => Box::new(Expr::Variable(<>)),
  "(" <Expr> ")",
};

NumLiteral: i32 = {
  r"[0-9]+" => i32::from_str(<>).unwrap(), 
};

Identifier: String = {
  r"[a-zA-Z]+" => <>.to_string(),
};


ExprOp: ExprOpcode = { 
  "+" => ExprOpcode::Add,
  "-" => ExprOpcode::Sub,
  "--" => ExprOpcode::Monus,
};

Expr2Op: ExprOpcode = {
  "*" => ExprOpcode::Mul,
  "/" => ExprOpcode::Div,
  "%" => ExprOpcode::Mod,
};


// ----- LOGICAL EXPRESSIONS ----- 

pub LogicalExpr: Box<LogicalExpr> = {
  "!" <a:LogicalExpr> => Box::new(LogicalExpr::Not(a)),
  LogicalExpr2
};

LogicalExpr2: Box<LogicalExpr> = {
  LogicalExpr2 LogicalOp LogicalExpr3 => Box::new(LogicalExpr::LogicalOp(<>)),
  LogicalExpr3,
};

LogicalExpr3: Box<LogicalExpr> = {
  Expr LogicalExprOp Expr  => Box::new(LogicalExpr::LogicalExprOp(<>)),
  "(" <LogicalExpr> ")",
};


LogicalOp: LogicalOpcode = {
  "&&" => LogicalOpcode::And,
  "||" => LogicalOpcode::Or,
};

LogicalExprOp: LogicalExprOpcode = {
  "==" => LogicalExprOpcode::Equal,
  "!=" => LogicalExprOpcode::Equal,
  "<" => LogicalExprOpcode::LessThan,
  "<=" => LogicalExprOpcode::LessThan,
  ">" => LogicalExprOpcode::GreaterThan,
  ">=" => LogicalExprOpcode::GreaterThan,
};

// ----- COMMANDS -----

pub Command: Box<Command> = {
  <l:Command> ";" <r:Command2> => Box::new(Command::Sequence(<>)),
  Command2,
}

Command2: Box<Command> = {
  "{" <l:Command2> "}" "[" <p:Probability> "]" "{" <r:Command2> "}" => Box::new(Command::ProbabilisticChoice(<>)),
  // Command3,
}

// Command3: Box<Command> = {
//   "if" "(" <c:LogicalExpr> ")" "{" <l:Command2> "}" "else" "{" <r:Command2> "}"
//   Command3,
// }

Probability: Probability = {
  r"[+-]?[0-9]*\.[0-9]+" => Probability::Probability(f32::from_str(<>).unwrap()),
}